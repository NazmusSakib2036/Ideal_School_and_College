import React, { useState, useEffect, useRef } from "react";
import ReactMarkdown from "react-markdown";
import { motion, AnimatePresence } from "framer-motion";
import { FaPaperPlane, FaTimes, FaComment, FaTrashAlt, FaRobot } from "react-icons/fa";
import "../assets/css/chatbot.css";

// üß† Bangla School Knowledge Base
const chatbotKnowledgeBase = `
‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶Ü‡¶Æ‡¶ø **‡¶¢‡¶æ‡¶ï‡¶æ ‡¶Ü‡¶á‡¶°‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶∏‡ßç‡¶ï‡ßÅ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶° ‡¶ï‡¶≤‡ßá‡¶ú**-‡¶è‡¶∞ ‡¶Ö‡¶´‡¶ø‡¶∏‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶¨‡¶ü‡•§ ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡ßç‡¶ï‡ßÅ‡¶≤ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§‡•§

**üè´ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá:**

* **‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Ø:** ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶∞‡ßç‡¶•‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶ú‡ßç‡¶û‡¶æ‡¶®, ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø‡¶¨‡ßã‡¶ß ‡¶ì ‡¶¶‡¶ï‡ßç‡¶∑‡¶§‡¶æ ‡¶¨‡¶ø‡¶ï‡¶æ‡¶∂‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶è‡¶ï‡¶ú‡¶® ‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶æ‡¶ô‡ßç‡¶ó ‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶ó‡¶°‡¶º‡ßá ‡¶§‡ßã‡¶≤‡¶æ‡¶∞ ‡¶≤‡¶ï‡ßç‡¶∑‡ßç‡¶Ø ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶ø‡•§

* **‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ‡¶∏‡¶Æ‡ßÇ‡¶π:** ‡¶Ü‡¶ß‡ßÅ‡¶®‡¶ø‡¶ï ‡¶∂‡ßç‡¶∞‡ßá‡¶£‡¶ø‡¶ï‡¶ï‡ßç‡¶∑, ‡¶∏‡¶Æ‡ßÉ‡¶¶‡ßç‡¶ß ‡¶ó‡ßç‡¶∞‡¶®‡ßç‡¶•‡¶æ‡¶ó‡¶æ‡¶∞, ‡¶Ö‡¶§‡ßç‡¶Ø‡¶æ‡¶ß‡ßÅ‡¶®‡¶ø‡¶ï ‡¶ï‡¶Æ‡ßç‡¶™‡¶ø‡¶â‡¶ü‡¶æ‡¶∞ ‡¶≤‡ßç‡¶Ø‡¶æ‡¶¨, ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶® ‡¶≤‡ßç‡¶Ø‡¶æ‡¶¨, ‡¶ñ‡ßá‡¶≤‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶† ‡¶è‡¶¨‡¶Ç ‡¶Æ‡¶æ‡¶≤‡ßç‡¶ü‡¶ø‡¶™‡¶æ‡¶∞‡¶™‡¶æ‡¶∏ ‡¶Ö‡¶°‡¶ø‡¶ü‡ßã‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶Æ‡•§

* **‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡ßç‡¶∞‡¶Æ:** ‡¶™‡ßç‡¶≤‡ßá-‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶•‡ßá‡¶ï‡ßá ‡¶¶‡ßç‡¶¨‡¶æ‡¶¶‡¶∂ ‡¶∂‡ßç‡¶∞‡ßá‡¶£‡¶ø ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶™‡¶æ‡¶†‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡•§ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶™‡¶æ‡¶†‡ßç‡¶Ø‡¶ï‡ßç‡¶∞‡¶Æ ‡¶ú‡¶æ‡¶§‡ßÄ‡¶Ø‡¶º ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶ï‡ßç‡¶∞‡¶Æ ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶∞‡¶£ ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®, ‡¶Æ‡¶æ‡¶®‡¶¨‡¶ø‡¶ï ‡¶ì ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡¶æ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ ‡¶∂‡¶æ‡¶ñ‡¶æ‡¶Ø‡¶º ‡¶™‡¶æ‡¶†‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡•§

* **‡¶∏‡¶π-‡¶™‡¶æ‡¶† ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡ßç‡¶∞‡¶Æ:** ‡¶¨‡¶ø‡¶§‡¶∞‡ßç‡¶ï ‡¶ï‡ßç‡¶≤‡¶æ‡¶¨, ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶® ‡¶ï‡ßç‡¶≤‡¶æ‡¶¨, ‡¶Ü‡¶∞‡ßç‡¶ü ‡¶ì ‡¶ï‡¶æ‡¶≤‡¶ö‡¶æ‡¶∞‡¶æ‡¶≤ ‡¶ï‡ßç‡¶≤‡¶æ‡¶¨ ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶¨‡¶õ‡¶∞ ‡¶ï‡ßç‡¶∞‡ßÄ‡¶°‡¶º‡¶æ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶Ø‡ßã‡¶ó‡¶ø‡¶§‡¶æ ‡¶ì ‡¶∏‡¶æ‡¶Ç‡¶∏‡ßç‡¶ï‡ßÉ‡¶§‡¶ø‡¶ï ‡¶Ö‡¶®‡ßÅ‡¶∑‡ßç‡¶†‡¶æ‡¶®‡ßá‡¶∞ ‡¶Ü‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡•§

* **‡¶≠‡¶∞‡ßç‡¶§‡¶ø:** ‡¶≠‡¶∞‡ßç‡¶§‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶§‡¶•‡ßç‡¶Ø‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡¶æ‡¶∏‡¶®‡¶ø‡¶ï ‡¶Ö‡¶´‡¶ø‡¶∏‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ì‡¶Ø‡¶º‡ßá‡¶¨‡¶∏‡¶æ‡¶á‡¶ü ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®‡•§

* **‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ:** ‡ßß‡ßß‡ßß/‡ß® ‡¶ï‡¶æ‡¶ì‡¶≤‡¶æ ‡¶ú‡¶æ‡¶Æ‡ßá ‡¶Æ‡¶∏‡¶ú‡¶ø‡¶¶ ‡¶∞‡ßã‡¶°, ‡¶Ü‡¶∂‡¶ï‡ßã‡¶®‡¶æ (‡¶π‡¶ú ‡¶ï‡ßç‡¶Ø‡¶æ‡¶Æ‡ßç‡¶™ ‡¶∏‡¶Ç‡¶≤‡¶ó‡ßç‡¶®), ‡¶¶‡¶ï‡ßç‡¶∑‡¶ø‡¶£‡¶ñ‡¶æ‡¶®, ‡¶¢‡¶æ‡¶ï‡¶æ-‡ßß‡ß®‡ß©‡ß¶‡•§

* **‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó:** üìß ‡¶á‡¶Æ‡ßá‡¶á‡¶≤: support@fabtechit.com, fabtechit8@gmail.com 
üìû ‡¶´‡ßã‡¶®: +8801892-382840, +8801313-186576 
`;

// üß† Bangla System Instruction
const systemInstruction = `
‡¶Ü‡¶™‡¶®‡¶ø ‡¶¢‡¶æ‡¶ï‡¶æ ‡¶Ü‡¶á‡¶°‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶∏‡ßç‡¶ï‡ßÅ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶° ‡¶ï‡¶≤‡ßá‡¶ú-‡¶è‡¶∞ ‡¶Ö‡¶´‡¶ø‡¶∏‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶¨‡¶ü‡•§

‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶â‡¶™‡¶∞‡ßã‡¶ï‡ßç‡¶§ ‡¶§‡¶•‡ßç‡¶Ø‡ßá‡¶∞ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ‡•§ 
‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ñ‡¶®‡¶á ‡¶¨‡¶≤‡¶¨‡ßá‡¶® ‡¶®‡¶æ ‡¶Ü‡¶™‡¶®‡¶ø AI ‡¶¨‡¶æ ‡¶Æ‡ßá‡¶∂‡¶ø‡¶®‡•§

‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø‡ßá‡¶∞ ‡¶¨‡¶æ‡¶á‡¶∞‡ßá ‡¶π‡¶Ø‡¶º, ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶®‡¶Æ‡ßç‡¶∞‡¶≠‡¶æ‡¶¨‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶® ‡¶Ø‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶∏‡ßá ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶´‡¶ø‡¶∏‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶ü‡¶ø‡¶Æ‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡¶≤‡ßá‡¶®‡•§

‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§, ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£, ‡¶™‡ßç‡¶∞‡¶´‡ßá‡¶∂‡¶®‡¶æ‡¶≤ ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï‡•§
`;

const Chatbot = () => {
  const [messages, setMessages] = useState(() => {
    const savedMessages = localStorage.getItem("chatbotMessages");
    return savedMessages ? JSON.parse(savedMessages) : [];
  });
  const [input, setInput] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const messagesEndRef = useRef(null);

  useEffect(() => {
    if (messages.length > 0) {
      localStorage.setItem("chatbotMessages", JSON.stringify(messages));
    } else {
      localStorage.removeItem("chatbotMessages");
    }
  }, [messages]);

  useEffect(() => {
    if (isOpen && messages.length === 0) {
      setMessages([
        {
          sender: "bot",
          text: "‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶Ü‡¶Æ‡¶ø ‡¶¢‡¶æ‡¶ï‡¶æ ‡¶Ü‡¶á‡¶°‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶∏‡ßç‡¶ï‡ßÅ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶° ‡¶ï‡¶≤‡ßá‡¶ú-‡¶è‡¶∞ ‡¶Ö‡¶´‡¶ø‡¶∏‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶¨‡¶ü‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßÄ ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶®?",
        },
      ]);
    }
  }, [isOpen, messages.length]);

  useEffect(() => {
    scrollToBottom();
  }, [messages, isTyping]);

  const scrollToBottom = () => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: "smooth" });
    }
  };

  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (!input.trim()) return;

    const userMessage = { sender: "user", text: input };
    setMessages((prevMessages) => [...prevMessages, userMessage]);
    setInput("");
    setIsTyping(true);

    const apiKey = import.meta.env.VITE_GEMINI_API_KEY;
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

    if (!apiKey) {
      const botMessage = {
        sender: "bot",
        text: "API ‡¶ï‡ßÄ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá .env ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
      };
      setIsTyping(false);
      setMessages((prevMessages) => [...prevMessages, botMessage]);
      return;
    }

    try {
      const combinedPrompt = `${systemInstruction}\n\n${chatbotKnowledgeBase}\n\n‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®: "${userMessage.text}"`;

      const payload = {
        contents: [{ role: "user", parts: [{ text: combinedPrompt }] }],
      };

      const response = await fetch(apiUrl, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      const result = await response.json();

      if (
        response.ok &&
        result.candidates &&
        result.candidates.length > 0 &&
        result.candidates[0].content?.parts?.length > 0
      ) {
        const text = result.candidates[0].content.parts[0].text;
        setMessages((prevMessages) => [
          ...prevMessages,
          { sender: "bot", text },
        ]);
      } else {
        const errorMessage =
          result.error?.message || "‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá‡•§";
        setMessages((prevMessages) => [
          ...prevMessages,
          {
            sender: "bot",
            text: `‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§! ‡¶Ü‡¶Æ‡¶ø ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶õ‡¶ø ‡¶®‡¶æ‡•§ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§: ${errorMessage}`,
          },
        ]);
      }
    } catch (error) {
      console.error("Fetch error:", error);
      setMessages((prevMessages) => [
        ...prevMessages,
        {
          sender: "bot",
          text: "‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
        },
      ]);
    } finally {
      setIsTyping(false);
    }
  };

  const toggleChat = () => {
    setIsOpen(!isOpen);
  };

  const clearChat = () => {
    setMessages([]);
    localStorage.removeItem("chatbotMessages");
  };

  const messageVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        type: "spring",
        stiffness: 500,
        damping: 20,
        duration: 0.3
      }
    },
  };

  const typingVariants = {
    initial: { scale: 0 },
    animate: {
      scale: 1,
      transition: {
        type: "spring",
        stiffness: 500,
        damping: 20,
        duration: 0.2,
      },
    },
  };

  const containerVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        when: "beforeChildren",
        staggerChildren: 0.1,
      },
    },
  };

  return (
    <div className="chatbot-container">
      <AnimatePresence>
        {isOpen && (
          <motion.div
            className="chatbot-window"
            initial={{ scale: 0.8, opacity: 0, y: 20 }}
            animate={{ scale: 1, opacity: 1, y: 0 }}
            exit={{ scale: 0.8, opacity: 0, y: 20 }}
            transition={{ type: "spring", stiffness: 300, damping: 20 }}
          >
            <div className="chatbot-header">
              <div className="chatbot-title-wrapper">
                <FaRobot className="chatbot-icon" />
                <h3 className="chatbot-title">‡¶¢‡¶æ‡¶ï‡¶æ ‡¶Ü‡¶á‡¶°‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶∏‡ßç‡¶ï‡ßÅ‡¶≤</h3>
              </div>
              <div className="chatbot-header-buttons">
                <motion.button
                  onClick={clearChat}
                  className="trash-button"
                  whileTap={{ scale: 0.9 }}
                >
                  <FaTrashAlt />
                </motion.button>
                <motion.button
                  onClick={toggleChat}
                  className="close-button"
                  whileTap={{ scale: 0.9 }}
                >
                  <FaTimes />
                </motion.button>
              </div>
            </div>

            <div className="chatbot-messages-wrapper">
              <motion.div
                className="messages-container"
                variants={containerVariants}
                initial="hidden"
                animate="visible"
              >
                <AnimatePresence>
                  {messages.map((msg, index) => (
                    <motion.div
                      key={index}
                      className={`message ${msg.sender}`}
                      variants={messageVariants}
                      initial="hidden"
                      animate="visible"
                      exit="exit"
                      layout
                    >
                      <div className="message-bubble">
                        <ReactMarkdown>{msg.text}</ReactMarkdown>
                      </div>
                    </motion.div>
                  ))}
                  {isTyping && (
                    <motion.div
                      className="message bot typing-indicator"
                      variants={typingVariants}
                      initial="initial"
                      animate="animate"
                    >
                      <div className="message-bubble">
                        <div className="typing-dots">
                          <span></span>
                          <span></span>
                          <span></span>
                        </div>
                      </div>
                    </motion.div>
                  )}
                </AnimatePresence>
                <div ref={messagesEndRef} />
              </motion.div>
            </div>

            <form onSubmit={handleSendMessage} className="chatbot-input-form">
              <input
                type="text"
                value={input}
                onChange={(e) => setInput(e.target.value)}
                placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®..."
              />
              <motion.button
                type="submit"
                disabled={isTyping}
                whileTap={{ scale: 0.95 }}
                whileHover={{ scale: 1.05 }}
              >
                <FaPaperPlane />
              </motion.button>
            </form>
          </motion.div>
        )}
      </AnimatePresence>

      <AnimatePresence>
        {!isOpen && (
          <motion.div
            className="chatbot-toggle-button-wrapper"
            initial={{ opacity: 0, scale: 0 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0 }}
            transition={{ type: "spring", stiffness: 200, damping: 10 }}
          >
            <motion.button
              onClick={toggleChat}
              className="chatbot-toggle-button"
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
            >
              <FaComment />
            </motion.button>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default Chatbot;